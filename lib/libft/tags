!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
${NAME}	Makefile	/^${NAME}:	${OBJS}$/;"	t
.c.o	Makefile	/^.c.o:$/;"	t
BUFFER_SIZE	libft.h	/^# define BUFFER_SIZE /;"	d
CC	Makefile	/^CC	=	 cc$/;"	m
CFLAGS	Makefile	/^CFLAGS	= 	-Wall -Wextra -Werror -g$/;"	m
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME	= 	libft.a$/;"	m
OBJS	Makefile	/^OBJS	= 	${SRCS:.c=.o}$/;"	m
RM	Makefile	/^RM	= 	rm -rf$/;"	m
SRCS	Makefile	/^SRCS	=	ft_atoi.c\\$/;"	m
all	Makefile	/^all:		${NAME}$/;"	t
bufflen_eol	get_next_line.c	/^size_t	bufflen_eol(char buff[])$/;"	f	typeref:typename:size_t
check_eol	get_next_line.c	/^size_t	check_eol(char *str)$/;"	f	typeref:typename:size_t
clean	Makefile	/^clean:$/;"	t
fclean	Makefile	/^fclean:		clean$/;"	t
ft_atod	ft_atod.c	/^double	ft_atod(char *str)$/;"	f	typeref:typename:double
ft_atoi	ft_atod.c	/^static int	ft_atoi(char *str)$/;"	f	typeref:typename:int	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(char *str)$/;"	f	typeref:typename:int
ft_bzero	ft_bzero.c	/^void	ft_bzero(char *s, size_t n)$/;"	f	typeref:typename:void
ft_concat	get_next_line.c	/^char	*ft_concat(char *str, char buff[])$/;"	f	typeref:typename:char *
ft_fillelem	ft_split.c	/^char	*ft_fillelem(char *s, char c, int i, char *elm)$/;"	f	typeref:typename:char *
ft_freestr	ft_strlen.c	/^char	*ft_freestr(char *s)$/;"	f	typeref:typename:char *
ft_freetbl	ft_split.c	/^char	**ft_freetbl(char **tbl, int pos)$/;"	f	typeref:typename:char **
ft_isnum	ft_atod.c	/^static int	ft_isnum(char c)$/;"	f	typeref:typename:int	file:
ft_isnum	ft_atoi.c	/^static int	ft_isnum(char c)$/;"	f	typeref:typename:int	file:
ft_isspace	ft_atod.c	/^static int	ft_isspace(char c)$/;"	f	typeref:typename:int	file:
ft_isspace	ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	typeref:typename:int	file:
ft_realign_buff	get_next_line.c	/^char	*ft_realign_buff(char *s, size_t i, char buff[])$/;"	f	typeref:typename:char *
ft_split	ft_split.c	/^char	**ft_split(char *s, char c)$/;"	f	typeref:typename:char **
ft_strdup	ft_strdup.c	/^char	*ft_strdup(char *src)$/;"	f	typeref:typename:char *
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(char *str)$/;"	f	typeref:typename:size_t
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strndup	ft_strndup.c	/^char	*ft_strndup(char *src, size_t n)$/;"	f	typeref:typename:char *
ft_wordcount	ft_split.c	/^int	ft_wordcount(char *str, char c)$/;"	f	typeref:typename:int
ft_wordlen	ft_split.c	/^int	ft_wordlen(char *str, char c)$/;"	f	typeref:typename:int
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
re	Makefile	/^re:		fclean	all$/;"	t
strlen_eol	ft_strlen.c	/^size_t	strlen_eol(char *str)$/;"	f	typeref:typename:size_t
