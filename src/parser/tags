!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/omoudni/miniRT/src/parser/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
build_ambient	ambient.c	/^int	build_ambient(char **tbl, t_ambient **obj)$/;"	f	typeref:typename:int
build_camera	camera.c	/^int	build_camera(char **tbl, t_camera **obj, int *to_switch)$/;"	f	typeref:typename:int
build_cylinder	cylinder.c	/^t_cylinder	*build_cylinder(char **tbl, int to_switch)$/;"	f	typeref:typename:t_cylinder *
build_cylinder_vecs	cylinder.c	/^int	build_cylinder_vecs(t_cylinder **obj)$/;"	f	typeref:typename:int
build_light	light.c	/^t_light	*build_light(char **tbl, int to_switch)$/;"	f	typeref:typename:t_light *
build_light_vecs	light.c	/^int	build_light_vecs(t_light **obj)$/;"	f	typeref:typename:int
build_plane	plane.c	/^t_plane	*build_plane(char **tbl, int to_switch)$/;"	f	typeref:typename:t_plane *
build_plane_vecs	plane.c	/^int	build_plane_vecs(t_plane*obj)$/;"	f	typeref:typename:int
build_sphere	sphere.c	/^t_sphere	*build_sphere(char **tbl, int to_switch)$/;"	f	typeref:typename:t_sphere *
cam_switch	camera.c	/^void	cam_switch(t_camera **obj, int *to_switch)$/;"	f	typeref:typename:void
check_rt	parser_utils.c	/^int	check_rt(char *path)$/;"	f	typeref:typename:int
check_space_null	parser_utils.c	/^int	check_space_null(t_space *space)$/;"	f	typeref:typename:int
dptr_len	parser_utils.c	/^int	dptr_len(char **tbl)$/;"	f	typeref:typename:int
free_ambient	free_er.c	/^void	free_ambient(t_ambient **amb_ptr)$/;"	f	typeref:typename:void
free_camera	free_er.c	/^void	free_camera(t_camera **cam_ptr)$/;"	f	typeref:typename:void
free_space	free_er.c	/^void	free_space(t_space *space_ptr)$/;"	f	typeref:typename:void
ft_swap_double	camera.c	/^void	ft_swap_double(double *a, double *b)$/;"	f	typeref:typename:void
i	free_er.c	/^	size_t		i;$/;"	v	typeref:typename:size_t
init_parser_params	parser_utils.c	/^void	init_parser_params(t_space *space, int *to_switch)$/;"	f	typeref:typename:void
lights	free_er.c	/^	t_light	**lights;$/;"	v	typeref:typename:t_light **
line_is_space	parser_utils.c	/^int	line_is_space(char *str)$/;"	f	typeref:typename:int
obj_lstadd	object_list.c	/^int	obj_lstadd(t_obj_lst **lst, int type, t_object *object)$/;"	f	typeref:typename:int
obj_lstfree	object_list.c	/^void	obj_lstfree(t_obj_lst **lst)$/;"	f	typeref:typename:void
obj_lstfree_sub	object_list.c	/^void	obj_lstfree_sub(t_obj_lst **elem_ptr)$/;"	f	typeref:typename:void
obj_lstlast	object_list.c	/^t_obj_lst	*obj_lstlast(t_obj_lst *lst)$/;"	f	typeref:typename:t_obj_lst *
obj_lstnew	object_list.c	/^t_obj_lst	*obj_lstnew(int type, void *content)$/;"	f	typeref:typename:t_obj_lst *
objs_builder	parser.c	/^int	objs_builder(char **tbl, t_space *space, int *to_switch)$/;"	f	typeref:typename:int
parser	parser.c	/^int	parser(char *path, t_space *space)$/;"	f	typeref:typename:int
print_help	errorinizer.c	/^void	print_help(void)$/;"	f	typeref:typename:void
puterr_free	errorinizer.c	/^void	puterr_free(char *err, t_space *space)$/;"	f	typeref:typename:void
sub_parser	parser.c	/^int	sub_parser(t_space *space, int *to_switch, int fd)$/;"	f	typeref:typename:int
tbl_3_check	parser_utils.c	/^int	tbl_3_check(char **tbl)$/;"	f	typeref:typename:int
tbl_free	parser_utils.c	/^void	tbl_free(char ***tbl)$/;"	f	typeref:typename:void
