!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/omoudni/miniRT/src/camera/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_diffuse_component	shading_light.c	/^void	add_diffuse_component(t_shader *shader, t_ray *lray, t_light *light)$/;"	f	typeref:typename:void
add_specular_component	shading_light.c	/^void	add_specular_component(t_shader *shader, t_ray *lray, t_light *light)$/;"	f	typeref:typename:void
camera_lookat	camera_lookat_mat.c	/^t_mat44	*camera_lookat(t_camera *cam)$/;"	f	typeref:typename:t_mat44 *
cast_ray	rays.c	/^size_t	cast_ray(t_ray *ray, t_space *space, char *chit, char *cshading)$/;"	f	typeref:typename:size_t
convert_color	shading_normal.c	/^void	convert_color(char *color, double (*bump_norm)[3])$/;"	f	typeref:typename:void
find_intersection	hits.c	/^void	find_intersection(int type, t_ray *ray, t_object *obj, t_hit *hit)$/;"	f	typeref:typename:void
get_new_norm	shading_uv_cy.c	/^void	get_new_norm(double old_norm[3], double (*new_norm)[3])$/;"	f	typeref:typename:void
init_light_components	shading.c	/^void	init_light_components(t_space *space, t_shader *shader)$/;"	f	typeref:typename:void
mat44_init	matrix.c	/^t_mat44	*mat44_init(double a[3], double b[3], double c[3], double d[3])$/;"	f	typeref:typename:t_mat44 *
mat44_init_tbn	shading_normal.c	/^t_mat44	*mat44_init_tbn(t_hit *hit, double norm[3], double bump_norm[3])$/;"	f	typeref:typename:t_mat44 *
mat_x_mat	matrix.c	/^t_mat44	*mat_x_mat(t_mat44 *mat1, t_mat44 *mat2, int to_free)$/;"	f	typeref:typename:t_mat44 *
mat_x_mat_utils	matrix.c	/^void	mat_x_mat_utils(double (*col_to_fill)[3],$/;"	f	typeref:typename:void
nearest_hit_object	hits.c	/^void	nearest_hit_object(t_ray *ray, t_obj_lst *elem, t_hit *hit)$/;"	f	typeref:typename:void
obj_to_char	rays.c	/^char	obj_to_char(t_obj_lst *elem)$/;"	f	typeref:typename:char
print_mat	matrix.c	/^void	print_mat(t_mat44 *mat)$/;"	f	typeref:typename:void
reflection_vector	rays.c	/^void	reflection_vector(double direction[3], double norm[3], double (*res)[3])$/;"	f	typeref:typename:void
set_bump_normal	shading_normal.c	/^int	set_bump_normal(t_hit *hit, t_data *bump, double (*norm)[3])$/;"	f	typeref:typename:int
set_checkerboard_rgb	shading_rgb.c	/^void	set_checkerboard_rgb(t_hit *hit, double surf_rgb[3], \\$/;"	f	typeref:typename:void
set_rgb_normal	shading.c	/^void	set_rgb_normal(t_hit *hit, double rgb[3], double size, t_shader *shader)$/;"	f	typeref:typename:void
set_rot_mat	shading_uv_cy.c	/^t_mat44	*set_rot_mat(double phi, double theta)$/;"	f	typeref:typename:t_mat44 *
set_ry	shading_uv_cy.c	/^t_mat44	*set_ry(double angle)$/;"	f	typeref:typename:t_mat44 *
set_rz	shading_uv_cy.c	/^t_mat44	*set_rz(double angle)$/;"	f	typeref:typename:t_mat44 *
set_shading_char	shading.c	/^void	set_shading_char(t_shader *shader, t_hit *hit)$/;"	f	typeref:typename:void
set_texture_rgb	shading_rgb.c	/^void	set_texture_rgb(t_hit *hit, t_data *tex, double (*rgb)[3])$/;"	f	typeref:typename:void
set_uv_cylinder	shading_uv.c	/^void	set_uv_cylinder(t_hit *hit, t_cylinder *cy)$/;"	f	typeref:typename:void
set_uv_plane	shading_uv.c	/^void	set_uv_plane(t_hit *hit, t_plane *pl)$/;"	f	typeref:typename:void
set_uv_sphere	shading_uv.c	/^void	set_uv_sphere(t_hit *hit, t_sphere *sp)$/;"	f	typeref:typename:void
shading	shading.c	/^void	shading(t_space *space, t_ray *ray, t_hit *hit, t_object *obj)$/;"	f	typeref:typename:void
shading_from_light	shading_light.c	/^void	shading_from_light(t_space *space, t_hit *hit, \\$/;"	f	typeref:typename:void
surface_rgb_normal	shading.c	/^void	surface_rgb_normal(t_hit *hit, t_object *obj, t_shader *shader)$/;"	f	typeref:typename:void
trans_to_cy	shading_uv_cy.c	/^int	trans_to_cy(double (*trans_phit)[3], double cy_norm, t_hit *hit, int i)$/;"	f	typeref:typename:int
vec_matrix_multiply	matrix.c	/^void	vec_matrix_multiply(t_mat44 *mat, double vec[3], double w, \\$/;"	f	typeref:typename:void
vec_matrix_multiply_bis	matrix.c	/^void	vec_matrix_multiply_bis(t_mat44 *mat, double old_vec[3], double w, \\$/;"	f	typeref:typename:void
