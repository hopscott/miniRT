!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/omoudni/miniRT/src/intersector/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
adjust_plane_norm	plane_intersection.c	/^void	adjust_plane_norm(t_obj_lst *space_objs, double r_or[3])$/;"	f	typeref:typename:void
cy_init_cam_center	init_center_cy_cam.c	/^void	cy_init_cam_center(t_camera *camera, t_obj_lst **objs)$/;"	f	typeref:typename:void
cy_intersection	cylinder_intersection.c	/^int	cy_intersection(t_ray *ray, t_cylinder *cy, t_hit *hit)$/;"	f	typeref:typename:int
cy_intersection_2	cylinder_intersection.c	/^int	cy_intersection_2(t_ray *ray, t_cylinder *cy, t_hit *hit)$/;"	f	typeref:typename:int
cylinder_surface_normal	cylinder_intersection_2.c	/^void	cylinder_surface_normal(t_cylinder *cy, double phit[3], \\$/;"	f	typeref:typename:void
find_smallest_dist	cylinder_intersection.c	/^double	find_smallest_dist(double r_or[3], double r_dir[3], t_cylinder *cy, \\$/;"	f	typeref:typename:double
get_short_dist	sphere_intersection.c	/^double	get_short_dist(double discriminant, double a, double b)$/;"	f	typeref:typename:double
init_cy_params	init_center_cy_cam.c	/^void	init_cy_params(t_cylinder *cylinder, double xyz[3], int type)$/;"	f	typeref:typename:void
light_intersection	light_intersection.c	/^int	light_intersection(t_ray *ray, t_light *light, t_hit *hit)$/;"	f	typeref:typename:int
new_dist	cylinder_intersection.c	/^uint8_t	new_dist(double dist, double r_or[3], double r_dir[3], t_cylinder *cy)$/;"	f	typeref:typename:uint8_t
plane_intersection	plane_intersection.c	/^int	plane_intersection(t_ray *ray, t_plane *plane, t_hit *hit)$/;"	f	typeref:typename:int
sphere_intersection	sphere_intersection.c	/^void	sphere_intersection(t_ray *ray, t_sphere *sp, t_hit *hit)$/;"	f	typeref:typename:void
sphere_surface_normal	sphere_intersection.c	/^void	sphere_surface_normal(t_ray *ray, t_sphere *sphere, double phit[3], \\$/;"	f	typeref:typename:void
sub_adjust_plane_norm	plane_intersection.c	/^void	sub_adjust_plane_norm(t_plane **plane, double inv_p_norm[3], \\$/;"	f	typeref:typename:void
sub_find_smallest	cylinder_intersection.c	/^double	sub_find_smallest(double new_dist1, double new_dist2, \\$/;"	f	typeref:typename:double
